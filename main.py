from flask import Flask, request
import requests
import os
from transformers import pipeline

app = Flask(__name__)

# üîë Tokens : assure-toi qu'ils sont bien d√©finis dans ton environnement ou en dur pour tester
VERIFY_TOKEN = os.environ.get("VERIFY_TOKEN", "mon_token_secret")
PAGE_ACCESS_TOKEN = os.environ.get("PAGE_ACCESS_TOKEN", "ton_token_page")

# Initialiser le pipeline Hugging Face pour la conversation
generator = pipeline("text-generation", model="facebook/blenderbot-400M-distill")

# Contexte pour sp√©cialiser le bot sur les plantes de potager
CONTEXT = (
    "Tu es un expert en jardinage, sp√©cialis√© dans les plantes de potager comme les tomates, les courgettes, les carottes, les salades, etc. "
    "Tu donnes des conseils pratiques et r√©ponds de mani√®re amicale et naturelle, comme un ami jardinier qui partage son savoir."
)

@app.route("/", methods=["GET"])
def verify():
    if request.args.get("hub.mode") == "subscribe" and request.args.get("hub.verify_token") == VERIFY_TOKEN:
        print("‚úÖ Webhook v√©rifi√© avec succ√®s.")
        return request.args.get("hub.challenge")
    print("‚ùå √âchec de la v√©rification du webhook.")
    return "Erreur de v√©rification"

@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()
    print("üì© Requ√™te re√ßue de Facebook :", data)

    for entry in data.get("entry", []):
        for messaging_event in entry.get("messaging", []):
            sender_id = messaging_event["sender"]["id"]
            if "message" in messaging_event:
                message_text = messaging_event["message"].get("text")
                if message_text:  # V√©rifie que le message n'est pas vide
                    print(f"üì® Message re√ßu de {sender_id} : {message_text}")
                    # G√©n√©rer une r√©ponse avec le mod√®le Hugging Face
                    response_text = generate_response(message_text)
                    send_message(sender_id, response_text)
    return "ok", 200

def generate_response(input_text):
    try:
        # Ajouter le contexte au texte d'entr√©e pour orienter la r√©ponse
        prompt = f"{CONTEXT} Utilisateur : {input_text}"
        # G√©n√©rer une r√©ponse avec le mod√®le
        generated = generator(
            prompt,
            max_length=100,  # Longueur maximale pour des r√©ponses concises
            num_return_sequences=1,  # Une seule r√©ponse
            truncation=True,  # √âviter les erreurs de longueur
            pad_token_id=generator.tokenizer.eos_token_id  # Token de fin pour BlenderBot
        )
        response_text = generated[0]["generated_text"].strip()
        # Supprimer le contexte et l'entr√©e de l'utilisateur de la r√©ponse
        if response_text.startswith(CONTEXT):
            response_text = response_text[len(CONTEXT):].strip()
        if response_text.startswith(f"Utilisateur : {input_text}"):
            response_text = response_text[len(f"Utilisateur : {input_text}"):].strip()
        # Limiter la r√©ponse √† une phrase ou deux pour plus de naturel
        response_text = response_text.split(". ")[0] + "." if ". " in response_text else response_text
        return response_text if response_text else "D√©sol√©, je n'ai pas bien compris. Peux-tu pr√©ciser ?"
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration de la r√©ponse : {e}")
        return "Oups, quelque chose s'est mal pass√© ! Peux-tu r√©essayer ?"

def send_message(recipient_id, message_text):
    url = f"https://graph.facebook.com/v17.0/me/messages?access_token={PAGE_ACCESS_TOKEN}"
    headers = {"Content-Type": "application/json"}
    payload = {
        "recipient": {"id": recipient_id},
        "message": {"text": message_text}
    }

    response = requests.post(url, headers=headers, json=payload)
    print(f"üì§ Message envoy√© √† {recipient_id} : {message_text}")
    print("üì• R√©ponse de l'API Facebook :", response.status_code, response.text)

if __name__ == "__main__":
    app.run(port=5000, debug=True)
